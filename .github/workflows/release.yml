name: Release

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., 1.2.3)'
        required: true
        type: string
      prerelease:
        description: 'Is this a pre-release?'
        required: false
        default: false
        type: boolean

env:
  PYTHON_VERSION: "3.11"

jobs:
  # =====================================================
  # Validate Release
  # =====================================================
  validate:
    name: Validate Release
    runs-on: ubuntu-latest
    outputs:
      current_version: ${{ steps.get_current_version.outputs.version }}
      new_version: ${{ steps.validate_version.outputs.version }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Need full history for version validation

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Get current version
      id: get_current_version
      run: |
        CURRENT_VERSION=$(python -c "import tomllib; print(tomllib.load(open('pyproject.toml', 'rb'))['project']['version'])")
        echo "version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
        echo "Current version: $CURRENT_VERSION"

    - name: Validate new version
      id: validate_version
      run: |
        NEW_VERSION="${{ github.event.inputs.version }}"
        CURRENT_VERSION="${{ steps.get_current_version.outputs.version }}"
        
        # Basic version format validation
        if ! [[ "$NEW_VERSION" =~ ^[0-9]+\.[0-9]+\.[0-9]+([a-z][0-9]+)?$ ]]; then
          echo "‚ùå Invalid version format: $NEW_VERSION"
          echo "Expected format: X.Y.Z or X.Y.ZaN (e.g., 1.2.3 or 1.2.3a1)"
          exit 1
        fi
        
        # Check if version is newer than current
        pip install packaging
        python -c "
        from packaging import version
        current = version.parse('$CURRENT_VERSION')
        new = version.parse('$NEW_VERSION')
        if new <= current:
            print('‚ùå New version ($NEW_VERSION) must be greater than current version ($CURRENT_VERSION)')
            exit(1)
        print('‚úÖ Version validation passed')
        "
        
        echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT

    - name: Check if tag already exists
      run: |
        NEW_VERSION="${{ steps.validate_version.outputs.version }}"
        if git tag -l | grep -q "^v$NEW_VERSION$"; then
          echo "‚ùå Tag v$NEW_VERSION already exists"
          exit 1
        fi
        echo "‚úÖ Tag v$NEW_VERSION is available"

    - name: Check for unreleased changes
      run: |
        # Check if there are changes since last tag
        LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
        if [ -n "$LAST_TAG" ]; then
          CHANGES=$(git log $LAST_TAG..HEAD --oneline)
          if [ -z "$CHANGES" ]; then
            echo "‚ö†Ô∏è  Warning: No changes since last tag $LAST_TAG"
          else
            echo "‚úÖ Found changes since last tag:"
            echo "$CHANGES" | head -5
          fi
        else
          echo "‚úÖ This appears to be the first release"
        fi

  # =====================================================
  # Update Version and Create PR
  # =====================================================
  update-version:
    name: Update Version
    runs-on: ubuntu-latest
    needs: validate
    outputs:
      pr_number: ${{ steps.create_pr.outputs.pull-request-number }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Update version in pyproject.toml
      run: |
        NEW_VERSION="${{ needs.validate.outputs.new_version }}"
        
        # Update version using Python
        python -c "
        import tomllib
        import re
        
        # Read current file
        with open('pyproject.toml', 'r') as f:
            content = f.read()
        
        # Update version line
        new_content = re.sub(
            r'version = \"[^\"]+\"',
            f'version = \"$NEW_VERSION\"',
            content
        )
        
        # Write back
        with open('pyproject.toml', 'w') as f:
            f.write(new_content)
        
        print(f'‚úÖ Updated version to $NEW_VERSION')
        "

    - name: Update CHANGELOG.md
      run: |
        NEW_VERSION="${{ needs.validate.outputs.new_version }}"
        DATE=$(date +%Y-%m-%d)
        
        # Create changelog entry if CHANGELOG.md exists
        if [ -f CHANGELOG.md ]; then
          # Create temporary file with new entry
          echo "# Changelog" > CHANGELOG_NEW.md
          echo "" >> CHANGELOG_NEW.md
          echo "## [$NEW_VERSION] - $DATE" >> CHANGELOG_NEW.md
          echo "" >> CHANGELOG_NEW.md
          echo "### Added" >> CHANGELOG_NEW.md
          echo "" >> CHANGELOG_NEW.md
          echo "### Changed" >> CHANGELOG_NEW.md
          echo "" >> CHANGELOG_NEW.md
          echo "### Fixed" >> CHANGELOG_NEW.md
          echo "" >> CHANGELOG_NEW.md
          
          # Append existing changelog (skip first line if it's "# Changelog")
          tail -n +2 CHANGELOG.md | grep -v "^# Changelog" >> CHANGELOG_NEW.md || true
          
          # Replace original
          mv CHANGELOG_NEW.md CHANGELOG.md
          
          echo "‚úÖ Updated CHANGELOG.md with version $NEW_VERSION"
        else
          echo "‚ö†Ô∏è  CHANGELOG.md not found, skipping changelog update"
        fi

    - name: Commit version update
      run: |
        NEW_VERSION="${{ needs.validate.outputs.new_version }}"
        
        git config user.name "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"
        
        git add pyproject.toml CHANGELOG.md
        git commit -m "üîñ Bump version to $NEW_VERSION

        Prepare for release v$NEW_VERSION
        
        - Updated version in pyproject.toml
        - Updated CHANGELOG.md with release template"

    - name: Create Pull Request
      id: create_pr
      uses: peter-evans/create-pull-request@v5
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        title: "üîñ Release v${{ needs.validate.outputs.new_version }}"
        body: |
          # Release v${{ needs.validate.outputs.new_version }}
          
          This PR prepares the release of version ${{ needs.validate.outputs.new_version }}.
          
          ## Changes
          - ‚¨ÜÔ∏è Bumped version to ${{ needs.validate.outputs.new_version }}
          - üìù Updated CHANGELOG.md with release template
          
          ## Pre-release Checklist
          - [ ] Review and update CHANGELOG.md entries
          - [ ] Verify all tests pass
          - [ ] Check documentation is up to date
          - [ ] Confirm breaking changes are documented
          
          ## Release Process
          1. Review and merge this PR
          2. The release workflow will automatically:
             - Create a Git tag
             - Build and publish to PyPI
             - Deploy documentation
             - Create GitHub release with notes
          
          **Type**: ${{ github.event.inputs.prerelease == 'true' && 'Pre-release' || 'Stable release' }}
        branch: release/v${{ needs.validate.outputs.new_version }}
        delete-branch: true
        labels: |
          release
          version-bump
        reviewers: gerritjandebruin

  # =====================================================
  # Wait for PR Approval and Merge
  # =====================================================
  wait-for-approval:
    name: Wait for PR Approval
    runs-on: ubuntu-latest
    needs: [validate, update-version]
    steps:
    - name: Wait for PR to be merged
      uses: actions/github-script@v7
      with:
        script: |
          const prNumber = ${{ needs.update-version.outputs.pr_number }};
          
          if (!prNumber) {
            console.log('No PR was created, skipping wait');
            return;
          }
          
          console.log(`Waiting for PR #${prNumber} to be merged...`);
          
          // Wait up to 24 hours for the PR to be merged
          const maxWaitTime = 24 * 60 * 60 * 1000; // 24 hours in milliseconds
          const startTime = Date.now();
          
          while (Date.now() - startTime < maxWaitTime) {
            const { data: pr } = await github.rest.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: prNumber
            });
            
            if (pr.merged) {
              console.log(`‚úÖ PR #${prNumber} has been merged!`);
              return;
            }
            
            if (pr.state === 'closed' && !pr.merged) {
              throw new Error(`‚ùå PR #${prNumber} was closed without merging`);
            }
            
            console.log(`PR #${prNumber} is still open, waiting...`);
            await new Promise(resolve => setTimeout(resolve, 60000)); // Wait 1 minute
          }
          
          throw new Error(`‚è∞ Timeout: PR #${prNumber} was not merged within 24 hours`);

  # =====================================================
  # Create Release
  # =====================================================
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [validate, wait-for-approval]
    if: needs.wait-for-approval.result == 'success'
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        ref: main  # Make sure we're on the updated main branch
        fetch-depth: 0

    - name: Create Git tag
      run: |
        NEW_VERSION="${{ needs.validate.outputs.new_version }}"
        
        git config user.name "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"
        
        git tag -a "v$NEW_VERSION" -m "Release v$NEW_VERSION"
        git push origin "v$NEW_VERSION"
        
        echo "‚úÖ Created and pushed tag v$NEW_VERSION"

    - name: Generate release notes
      id: release_notes
      run: |
        NEW_VERSION="${{ needs.validate.outputs.new_version }}"
        
        # Extract changelog section for this version
        if [ -f CHANGELOG.md ]; then
          # Get content between this version and next version header
          awk "/## \[$NEW_VERSION\]/,/## \[.*\]/" CHANGELOG.md | head -n -1 > release_notes.md
          
          # If no specific notes found, create generic ones
          if [ ! -s release_notes.md ]; then
            echo "Release notes for version $NEW_VERSION" > release_notes.md
            echo "" >> release_notes.md
            echo "See CHANGELOG.md for detailed changes." >> release_notes.md
          fi
        else
          echo "Release notes for version $NEW_VERSION" > release_notes.md
          echo "" >> release_notes.md
          echo "See commit history for changes in this release." >> release_notes.md
        fi
        
        echo "Generated release notes:"
        cat release_notes.md

    - name: Create GitHub Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ needs.validate.outputs.new_version }}
        release_name: v${{ needs.validate.outputs.new_version }}
        body_path: release_notes.md
        draft: false
        prerelease: ${{ github.event.inputs.prerelease }}

    - name: Trigger publish workflow
      uses: actions/github-script@v7
      with:
        script: |
          await github.rest.actions.createWorkflowDispatch({
            owner: context.repo.owner,
            repo: context.repo.repo,
            workflow_id: 'publish.yml',
            ref: 'v${{ needs.validate.outputs.new_version }}'
          });
          
          console.log('‚úÖ Triggered publish workflow');

  # =====================================================
  # Post-release Tasks
  # =====================================================
  post-release:
    name: Post-release Tasks
    runs-on: ubuntu-latest
    needs: [validate, create-release]
    if: needs.create-release.result == 'success'
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Create post-release issue
      uses: actions/github-script@v7
      with:
        script: |
          const version = "${{ needs.validate.outputs.new_version }}";
          const isPrerelease = "${{ github.event.inputs.prerelease }}" === "true";
          
          const title = `üìã Post-release tasks for v${version}`;
          const body = `# Post-release tasks for v${version}
          
          This issue tracks follow-up tasks after releasing version ${version}.
          
          ## Immediate Tasks
          - [ ] Verify PyPI publication: https://pypi.org/project/easy-pmf/${version}/
          - [ ] Check documentation deployment
          - [ ] Test installation: \`pip install easy-pmf==${version}\`
          - [ ] Verify GitHub release assets
          
          ## Follow-up Tasks
          - [ ] Update any dependent projects
          - [ ] Update package managers (conda-forge, etc.)
          - [ ] Announce release (if stable)
          - [ ] Social media announcement (if major release)
          
          ${isPrerelease ? '## Pre-release Notes\n\nThis is a pre-release. Monitor for issues before stable release.\n' : ''}
          
          ## Monitoring
          - [ ] Monitor for bug reports
          - [ ] Check download statistics
          - [ ] Review user feedback
          
          ---
          
          Auto-generated after release v${version}`;
          
          await github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: title,
            body: body,
            labels: ['release', 'post-release-tasks'],
            assignees: ['gerritjandebruin']
          });
          
          console.log(`‚úÖ Created post-release issue for v${version}`);

    - name: Send notification
      run: |
        echo "üéâ Release v${{ needs.validate.outputs.new_version }} completed successfully!"
        echo "üì¶ Package should be available on PyPI shortly"
        echo "üìñ Documentation will be updated automatically"
