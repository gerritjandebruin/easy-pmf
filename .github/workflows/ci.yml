name: CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  PYTHON_VERSION: "3.11"  # Default Python version for most jobs

jobs:
  # =====================================================
  # Code Quality and Testing Matrix
  # =====================================================
  test:
    name: Test Python ${{ matrix.python-version }} on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ["3.9", "3.10", "3.11", "3.12"]
        exclude:
          # Reduce matrix size for faster CI - test all Python versions on Ubuntu only
          - os: windows-latest
            python-version: "3.9"
          - os: windows-latest
            python-version: "3.10"
          - os: macos-latest
            python-version: "3.9"
          - os: macos-latest
            python-version: "3.10"

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install uv
      uses: astral-sh/setup-uv@v3
      with:
        version: "latest"

    - name: Install dependencies
      run: |
        uv sync --all-groups

    - name: Run tests
      run: |
        uv run pytest --cov=easy_pmf --cov-report=xml --cov-report=term-missing

    - name: Upload coverage to Codecov
      if: false  # Temporarily disabled until Codecov token is configured
      # if: matrix.os == 'ubuntu-latest' && matrix.python-version == env.PYTHON_VERSION
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.xml
        fail_ci_if_error: true
        token: ${{ secrets.CODECOV_TOKEN }}

  # =====================================================
  # Code Quality Checks
  # =====================================================
  lint:
    name: Code Quality
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install uv
      uses: astral-sh/setup-uv@v3

    - name: Install dependencies
      run: uv sync --group dev

    - name: Run ruff linter
      run: |
        uv run ruff check . --exclude="mwe.py,analyze_all_datasets.py,quick_analysis.py" --output-format=github

    - name: Run ruff formatter
      run: |
        uv run ruff format --check . --exclude="mwe.py,analyze_all_datasets.py,quick_analysis.py"

    - name: Run mypy type checker
      run: |
        uv run mypy .

  # =====================================================
  # Security Scanning
  # =====================================================
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install uv
      uses: astral-sh/setup-uv@v3

    - name: Install dependencies
      run: uv sync --group dev

    - name: Run safety check
      run: |
        uv run pip install safety
        uv run safety check --json --output safety-report.json || true

    - name: Upload safety report
      uses: actions/upload-artifact@v4
      with:
        name: safety-report
        path: safety-report.json

    - name: Run bandit security linter
      run: |
        uv run pip install bandit
        uv run bandit -r src/ -f json -o bandit-report.json || true

    - name: Upload bandit report
      uses: actions/upload-artifact@v4
      with:
        name: bandit-report
        path: bandit-report.json

  # =====================================================
  # Documentation Build
  # =====================================================
  docs:
    name: Documentation Build
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install uv
      uses: astral-sh/setup-uv@v3

    - name: Install dependencies
      run: uv sync --group docs

    - name: Build documentation
      run: |
        uv run mkdocs build --strict

    - name: Upload documentation artifacts
      uses: actions/upload-artifact@v4
      with:
        name: documentation
        path: site/

  # =====================================================
  # Package Build
  # =====================================================
  build:
    name: Build Package
    runs-on: ubuntu-latest
    needs: [test, lint, security, docs]
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install uv
      uses: astral-sh/setup-uv@v3

    - name: Install build dependencies
      run: uv sync --group dev

    - name: Build package
      run: |
        uv run python -m build

    - name: Check package
      run: |
        uv run twine check dist/*

    - name: Upload package artifacts
      uses: actions/upload-artifact@v4
      with:
        name: package
        path: dist/

  # =====================================================
  # Integration Test (Optional - if you have integration tests)
  # =====================================================
  integration:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [build]
    if: github.event_name == 'pull_request' || github.ref == 'refs/heads/main'
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install uv
      uses: astral-sh/setup-uv@v3

    - name: Download package artifacts
      uses: actions/download-artifact@v4
      with:
        name: package
        path: dist/

    - name: Install package from wheel
      run: |
        uv venv
        uv pip install dist/*.whl

    - name: Run integration tests
      run: |
        uv run python -c "import easy_pmf; print('Package imports successfully')"
        # Add more integration tests here if you have them

  # =====================================================
  # Performance Benchmarks (Optional)
  # =====================================================
  benchmark:
    name: Performance Benchmarks
    runs-on: ubuntu-latest
    needs: [test]
    if: github.ref == 'refs/heads/main'
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install uv
      uses: astral-sh/setup-uv@v3

    - name: Install dependencies
      run: |
        uv sync --all-groups
        uv run pip install pytest-benchmark

    - name: Run benchmarks
      run: |
        uv run pytest tests/ -k benchmark --benchmark-json=benchmark.json || true

    - name: Upload benchmark results
      uses: actions/upload-artifact@v4
      with:
        name: benchmark-results
        path: benchmark.json

  # =====================================================
  # Status Check Summary
  # =====================================================
  status:
    name: CI Status
    runs-on: ubuntu-latest
    needs: [test, lint, security, docs, build]
    if: always()
    steps:
    - name: Check CI status
      run: |
        if [[ "${{ needs.test.result }}" == "success" &&
              "${{ needs.lint.result }}" == "success" &&
              "${{ needs.security.result }}" == "success" &&
              "${{ needs.docs.result }}" == "success" &&
              "${{ needs.build.result }}" == "success" ]]; then
          echo "✅ All CI checks passed!"
          exit 0
        else
          echo "❌ Some CI checks failed:"
          echo "  Test: ${{ needs.test.result }}"
          echo "  Lint: ${{ needs.lint.result }}"
          echo "  Security: ${{ needs.security.result }}"
          echo "  Docs: ${{ needs.docs.result }}"
          echo "  Build: ${{ needs.build.result }}"
          exit 1
        fi
